Git has three main states that your files can reside in: committed, modified, and staged. 
Committed means that the data is safely stored in your local database. 
Modified means that you have changed the file but have not committed it to your database yet. 
Staged means that you have marked a modified file in its current version to go into your next commit snapshot.

This leads us to the three main sections of a Git project: the Git directory, the working directory, and the staging area.

The Git directory is where Git stores the metadata and object database for your project.
This is the most important part of Git, and it is what is copied when you clone a repository from another computer.

The working directory is a single checkout of one version of the project.
These files are pulled out of the compressed database in the Git directory and placed on disk for you to use or modify.

The staging area is a file, generally contained in your Git directory, that stores information about what will go into your next commit.
It’s sometimes referred to as the “index”, but it’s also common to refer to it as the staging area.

The basic Git workflow goes something like this:

1. You modify files in your working directory.

2. You stage the files, adding snapshots of them to your staging area.

3. You do a commit, which takes the files as they are in the staging area and stores that snapshot permanently to your Git directory.

Git comes with a tool called git config that lets you get and set configuration variables that control all aspects of how Git looks and operates
If you want to check your settings, you can use the git config --list command to list all the settings.
If you ever need help while using Git, there are three ways to get the manual page (manpage) help for any of the Git commands:

git help <verb>
git <verb> --help
man git-<verb>

Example:git help config]

*  git init : This creates a new subdirectory named .git that contains all of your necessary repository files – a Git repository skeleton.
*  git add : This command is for to add the files in the repository(To track a new file).
			 git add is a multipurpose command – you use it to begin tracking new files, to stage files, and to do other things like marking merge-conflicted files as resolved.
			 The git add command takes a path name for either a file or a directory; if it’s a directory, the command adds all the files in that directory recursively.	
*  git status : After adding the files using git add we can check whether they added or not using this command.Basically it  determine which files are in which state 
*  git commit -m 'initial project version': for commit(anything that is still unstaged – any files you have created or modified that you haven’t run git add on since you edited them – won’t go into this commit.)
											Adding the -a option to the git commit command makes Git automatically stage every file that is already tracked before doing the commit, letting you skip the git add part
*  git clone : It is for to copy of an existing Git repository. Every version of every file for the history of the project is pulled down by default when you run git clone.
*  git status -s or git status --short: To get a far more simplified output from the command:
										Example: git status -s
												 M README
												 MM Rakefile
												 A  lib/git.rb
												 M  lib/simplegit.rb
												 ?? LICENSE.txt
												 -> New files that aren’t tracked have a ?? 
												 -> new files that have been added to the staging area have an A
												 -> modified files have an M
*  git diff: It shows only changes that are still unstaged.
			  Example: if you staged the CONTRIBUTING.md file and then edit it, you can use git diff to see the changes in the file that are staged and the changes that are unstaged.		
*  git rm:  removes the file from your working directory so you don’t see it as an untracked file the next time around.
*  git rm --cached README:  If we want to keep the file on your hard drive but not have Git track it anymore.	
*  git mv:  If you want to rename a file in Git, you can run something like: $ git mv file_from file_to	  
*  git log: lists the commits made in that repository in reverse chronological order – that is, the most recent commits show up first.
			This command lists each commit with its SHA-1 checksum, the author’s name and email, the date written, and the commit message.
			*  git log -p -2: which shows the difference introduced in each commit. You can also use -2, which limits the output to only the last two entries.
			*  git log --stat: --stat option prints below each commit entry a list of modified files, how many files were changed, and how many lines in those files were added and removed. 
			   It also puts a summary of the information at the end.
			*  Another really useful option is --pretty. This option changes the log output to formats other than the default.
				git log --pretty=oneline: The oneline option prints each commit on a single line.
				git log --pretty=format:"%h - %an, %ar : %s"
			*  Limiting logs output:-<n>, where n is any integer to show the last n commits.
			   git log --since=2.weeks
			   git log -Sfunction_name: Only show commits adding or removing code matching the string.
*   git commit --amend: One of the common undos takes place when you commit too early and possibly forget to add some files, 
						or you mess up your commit message. If you want to try that commit again, you can run commit with the --amend option.
*   git reset HEAD README.md: It will unstaged the file after adding it to the satged phase
*   git checkout -- CONTRIBUTING.md: To unmodifying and revert it back the modified file to what is looked like when you last committed.
									 -> git checkout -- <file> is a dangerous command. Any changes you made to that file are gone – Git just copied another file over it.
									    Don’t ever use this command unless you absolutely know that you don’t want the file.
*   git remote:  To see which remote servers you have configured	
				 -> git remote -v: shows you the URLs that Git has stored for the shortname to be used when reading and writing to that remote
				 -> git remote add <shortname> <url>:  To add a new remote Git repository as a shortname you can reference easily.
													Example:git remote add nehalsoni23 http://github.com/nehalsoni23/CIGNEX Learning.git
				 -> git fetch [remote-name]:  fetches any new work that has been pushed to that server since you cloned (or last fetched from) it.
					It’s important to note that the git fetch command only downloads the data to your local repository –
					it doesn’t automatically merge it with any of your work or modify what you’re currently working on. You have to merge it manually.
				 -> git pull: command to automatically fetch and then merge that remote branch into your current branch. 
							  generally fetches data from the server you originally cloned from and automatically tries to merge it into the code you’re currently working on.						
				 -> git remote rename pb paul: for rename
				 -> git remote rm paul: It will remove the remote from your repository	
*   git log --pretty=format:'%h %s' --graph: to specify a commit is via its ancestry
*   git show HEAD^:  you can see the previous commit by specifying HEAD^, which means “the parent of HEAD”.( If you place a ^ at the end of a reference, Git resolves it to mean the parent of that commit.)
*   git show d921970^: It will show the parent of d921970
*   git show HEAD~2: “the first parent of the first parent,” or “the grandparent” 
*   git log master..experiment: all commits reachable by experiment that aren’t reachable by master.
*   git log experiment..master: all commits in master that aren’t in experiment.					
					
*   steps for remote git fetch , merge 	and pull
	//add the remote 
    git remote add charmy1 https://github.com/charmy1/CD.git
	//if you want to see the changes before merging the file
    git fetch charmy1 	
	//It will create the FETCH_HEAD file with hash no in .git folder
	//If you want to see the changes type below code
	gitk --all or
	git show long hash no.
	// After checking the file if you want to merge
	git merge FETCH_HEAD
	
	//If you don't want to see the changes and directly want to merge type below code
	git pull charmy1 master(branch name)
	

Remember that each file in your working directory can be in one of two states: tracked or untracked. 
-> Tracked files are files that were in the last snapshot; they can be unmodified, modified, or staged.
-> Untracked files are everything else – any files in your working directory that were not in your last snapshot and are not in your staging area.

Untracked basically means that Git sees a file you didn’t have in the previous snapshot (commit); Git won’t start including it in your commit snapshots until you explicitly tell it to do so. 

*  You’ll have a class of files that you don’t want Git to automatically add or even show you as being untracked.
   In such cases, you can create a file listing patterns to match them named .gitignore.
   .gitignore
   *.[oa]
   *~
   The first line tells Git to ignore any files ending in “.o” or “.a” – object and archive files that may be the product of building your code.
   The second line tells Git to ignore all files whose names end with a tilde (~)
   
*  Tagging
   Git has the ability to tag specific points in history as being important. Typically people use this functionality to mark release points (v1.0, and so on).
   -> Git uses two main types of tags: lightweight and annotated.
      Lightweight: A lightweight tag is very much like a branch that doesn’t change – it’s just a pointer to a specific commit.
				   To create a lightweight tag, don’t supply the -a, -s, or -m option use git tag v1.4-lw
      Annotated: are stored as full objects in the Git database. They’re checksummed; contain the tagger name, email, and date; 
	             have a tagging message; and can be signed and verified with GNU Privacy Guard (GPG).
				 Example: git tag -a v1.4 -m "my version 1.4"(easiest way is to specify -a when you run the tag command)
   -> By default, the git push command doesn’t transfer tags to remote servers. You will have to explicitly push tags to a shared server after you have created them. 
	  Example: git push origin v1.5	
   -> If you have a lot of tags that you want to push up at once, you can also use the --tags option
      Example:git push origin --tags

*  Git Aliases
    If you don’t want to type the entire text of each of the Git commands, you can easily set up an alias for each command using git config.
	Example: $ git config --global alias.co checkout
			 $ git config --global alias.br branch
			 $ git config --global alias.ci commit(instead of typing git commit, you just need to type git ci)
			 $ git config --global alias.st status
			 
*   Three diff way to reset the file
    -> git checkout HEAD filename
	-> git reset HEAD filename
	-> git reset SHA: Can be used to reset to a previous commit in your commit history.	
			 
*  Git Branching
   -> Branching means you diverge from the main line of development and continue to do work without messing with that main line. 
   -> The way Git branches is incredibly lightweight, making branching operations nearly instantaneous, and switching back and forth between branches generally just as fast. 
   -> When you make a commit, Git stores a commit object that contains a pointer to the snapshot of the content you staged. This object also contains the author’s name and 
      email, the message that you typed, and pointers to the commit or commits that directly came before this commit (its parent or parents): zero parents for the initial commit, 
	  one parent for a normal commit, and multiple parents for a commit that results from a merge of two or more branches.
	  * git log --oneline --decorate: decorate  that shows you where the branch pointers are pointing. 
	  * git branch testing: creating a new branch
	  * git checkout testing: To switch to an existing branch(switch to the new testing branch)
	  * git merge testing: Merge the file in to the master branch
	  * git branch --merged: It will show only merged file
	  * git branch --no-merged: It will show unmerged file
	  * git branch -d testing: Delete the branch
	  * git ls-remote [remote], or git remote show [remote]:  get a full list of remote references explicitly 
	  * git push origin --delete serverfix: If you want to delete your serverfix branch from the server
	  * git push origin rebasing(branchname): you can push it up to the remote server
      * git push origin rebasing:rewriting: the branch name on your remote server is rewriting but on your local it is rebasing 
      * git log --no-merges issue54..origin/master: only show the list of commits that are on the latter branch (in this case origin/master) that are not on the first branch (in this case issue54).
      * -u flag:  this is short for --set-upstream, which configures the branches for easier pushing and pulling later.	
      * git push -u origin featureB:featureBee :  push the merged work of featureB branch to the featureBee branch on the server. 	  
	->  To create a branch and switch to it at the same time, you can run the git checkout command with the -b switch:git checkout -b iss53  
   -> Git branching  makes sure that unstable code is never committed to the main code base, and it gives you the chance to clean up your feature’s history before merging it into the main branch.	
   * Rebasing: Git, there are two main ways to integrate changes from one branch into another: the merge and the rebase.
               ->  There is no difference in the end product of the integration, but rebasing makes for a cleaner history. If you examine the log of a rebased branch, it looks like a linear history:
          		   it appears that all the work happened in series, even when it originally happened in parallel.
			   ->  Rebasing replays changes from one line of work onto another in the order they were introduced, whereas merging takes the endpoints and merges them together.
			   ->   git rebase --onto master server client
			   
* Git Fork
    -> First go to the github repository that you want to fork and click on the fork button
    -> Now open the git bash
    -> git clone https://github.com/juhisoni4/CD.git
    -> It will create the local repository in your system
    -> Then do your work(create a branch, modify or update file)
	-> add the remote on your repository. Exp:git add remote charmy1 https://github.com/charmy1/CD.git
    -> Commit your work on fork server repository
	-> Push your work. Exp:git push -u charmy1 master
    -> Create a pull request from github. Exp: git request-pull origin/master charmy1	
			   
* Git Stash
   -> If you don’t want to do a commit of half-done work just so you can get back to this point later in that case we uses 	stash. It will saves it on a stack of unfinished changes that you can reapply at any time.
   -> Git command for stash
   -> $ git stash
      After completing your work you can go to stashed file using following code
   -> $ git stash apply
    And then  modify your file, add the file and then commit the file
   -> $ git stash list
    It will list the all stash file list
   ->  If you specify --include-untracked or -u, Git will also stash any untracked files you have created.

* Git clean
   -> you may not want to stash some work or files in your working directory, but simply get rid of them. The git clean    command will do this for you. 
   -> $ git clean(By default, the git clean command will only remove untracked files that are not ignored. Any file that matches a pattern in your .gitignore or other ignore files will not be removed)
   -> $ git clean -d -n:do a dry run and tell me what you would have removed”. 
   
*  Git Grep
   ->  grep that allows you to easily search through any committed tree or the working directory for a string or regular expression.
   command: $ git grep -n Juhi( You can pass -n to print out the line numbers where Git has found matches.)
            $ git grep --count Juhi(Git summarize the output by just showing you which files matched and how many matches there were in each file with the --count option)
   
				   
   
   
  	  
    
   


